// Code generated by Prisma (prisma@1.26.6). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  coordinates: (where?: CoordinatesWhereInput) => Promise<boolean>;
  event: (where?: EventWhereInput) => Promise<boolean>;
  socialProfile: (where?: SocialProfileWhereInput) => Promise<boolean>;
  talk: (where?: TalkWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  venue: (where?: VenueWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  coordinateses: (args?: {
    where?: CoordinatesWhereInput;
    orderBy?: CoordinatesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Coordinates>;
  coordinatesesConnection: (args?: {
    where?: CoordinatesWhereInput;
    orderBy?: CoordinatesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CoordinatesConnectionPromise;
  event: (where: EventWhereUniqueInput) => EventPromise;
  events: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventConnectionPromise;
  socialProfiles: (args?: {
    where?: SocialProfileWhereInput;
    orderBy?: SocialProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SocialProfile>;
  socialProfilesConnection: (args?: {
    where?: SocialProfileWhereInput;
    orderBy?: SocialProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SocialProfileConnectionPromise;
  talk: (where: TalkWhereUniqueInput) => TalkPromise;
  talks: (args?: {
    where?: TalkWhereInput;
    orderBy?: TalkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Talk>;
  talksConnection: (args?: {
    where?: TalkWhereInput;
    orderBy?: TalkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TalkConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  venue: (where: VenueWhereUniqueInput) => VenuePromise;
  venues: (args?: {
    where?: VenueWhereInput;
    orderBy?: VenueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Venue>;
  venuesConnection: (args?: {
    where?: VenueWhereInput;
    orderBy?: VenueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VenueConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCoordinates: (data: CoordinatesCreateInput) => CoordinatesPromise;
  updateManyCoordinateses: (args: {
    data: CoordinatesUpdateManyMutationInput;
    where?: CoordinatesWhereInput;
  }) => BatchPayloadPromise;
  deleteManyCoordinateses: (
    where?: CoordinatesWhereInput
  ) => BatchPayloadPromise;
  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput;
    where: EventWhereUniqueInput;
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput;
    where?: EventWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput;
    create: EventCreateInput;
    update: EventUpdateInput;
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createSocialProfile: (data: SocialProfileCreateInput) => SocialProfilePromise;
  updateManySocialProfiles: (args: {
    data: SocialProfileUpdateManyMutationInput;
    where?: SocialProfileWhereInput;
  }) => BatchPayloadPromise;
  deleteManySocialProfiles: (
    where?: SocialProfileWhereInput
  ) => BatchPayloadPromise;
  createTalk: (data: TalkCreateInput) => TalkPromise;
  updateTalk: (args: {
    data: TalkUpdateInput;
    where: TalkWhereUniqueInput;
  }) => TalkPromise;
  updateManyTalks: (args: {
    data: TalkUpdateManyMutationInput;
    where?: TalkWhereInput;
  }) => BatchPayloadPromise;
  upsertTalk: (args: {
    where: TalkWhereUniqueInput;
    create: TalkCreateInput;
    update: TalkUpdateInput;
  }) => TalkPromise;
  deleteTalk: (where: TalkWhereUniqueInput) => TalkPromise;
  deleteManyTalks: (where?: TalkWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVenue: (data: VenueCreateInput) => VenuePromise;
  updateVenue: (args: {
    data: VenueUpdateInput;
    where: VenueWhereUniqueInput;
  }) => VenuePromise;
  updateManyVenues: (args: {
    data: VenueUpdateManyMutationInput;
    where?: VenueWhereInput;
  }) => BatchPayloadPromise;
  upsertVenue: (args: {
    where: VenueWhereUniqueInput;
    create: VenueCreateInput;
    update: VenueUpdateInput;
  }) => VenuePromise;
  deleteVenue: (where: VenueWhereUniqueInput) => VenuePromise;
  deleteManyVenues: (where?: VenueWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  coordinates: (
    where?: CoordinatesSubscriptionWhereInput
  ) => CoordinatesSubscriptionPayloadSubscription;
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  socialProfile: (
    where?: SocialProfileSubscriptionWhereInput
  ) => SocialProfileSubscriptionPayloadSubscription;
  talk: (
    where?: TalkSubscriptionWhereInput
  ) => TalkSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  venue: (
    where?: VenueSubscriptionWhereInput
  ) => VenueSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CoordinatesOrderByInput =
  | "x_ASC"
  | "x_DESC"
  | "y_ASC"
  | "y_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SocialNetworks =
  | "FACEBOOK"
  | "TWITTER"
  | "GITHUB"
  | "LINKEDIN"
  | "PERSONAL";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "middleName_ASC"
  | "middleName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SocialProfileOrderByInput =
  | "type_ASC"
  | "type_DESC"
  | "value_ASC"
  | "value_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TalkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "length_ASC"
  | "length_DESC"
  | "remarks_ASC"
  | "remarks_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "timeStart_ASC"
  | "timeStart_DESC"
  | "timeEnd_ASC"
  | "timeEnd_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type VenueOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "address_ASC"
  | "address_DESC"
  | "googPlaceId_ASC"
  | "googPlaceId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface CoordinatesWhereInput {
  x?: Float;
  x_not?: Float;
  x_in?: Float[] | Float;
  x_not_in?: Float[] | Float;
  x_lt?: Float;
  x_lte?: Float;
  x_gt?: Float;
  x_gte?: Float;
  y?: Float;
  y_not?: Float;
  y_in?: Float[] | Float;
  y_not_in?: Float[] | Float;
  y_lt?: Float;
  y_lte?: Float;
  y_gt?: Float;
  y_gte?: Float;
  AND?: CoordinatesWhereInput[] | CoordinatesWhereInput;
  OR?: CoordinatesWhereInput[] | CoordinatesWhereInput;
  NOT?: CoordinatesWhereInput[] | CoordinatesWhereInput;
}

export type EventWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  middleName?: String;
  middleName_not?: String;
  middleName_in?: String[] | String;
  middleName_not_in?: String[] | String;
  middleName_lt?: String;
  middleName_lte?: String;
  middleName_gt?: String;
  middleName_gte?: String;
  middleName_contains?: String;
  middleName_not_contains?: String;
  middleName_starts_with?: String;
  middleName_not_starts_with?: String;
  middleName_ends_with?: String;
  middleName_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  socials_every?: SocialProfileWhereInput;
  socials_some?: SocialProfileWhereInput;
  socials_none?: SocialProfileWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface SocialProfileWhereInput {
  type?: SocialNetworks;
  type_not?: SocialNetworks;
  type_in?: SocialNetworks[] | SocialNetworks;
  type_not_in?: SocialNetworks[] | SocialNetworks;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  AND?: SocialProfileWhereInput[] | SocialProfileWhereInput;
  OR?: SocialProfileWhereInput[] | SocialProfileWhereInput;
  NOT?: SocialProfileWhereInput[] | SocialProfileWhereInput;
}

export interface TalkWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  speaker?: UserWhereInput;
  length?: Int;
  length_not?: Int;
  length_in?: Int[] | Int;
  length_not_in?: Int[] | Int;
  length_lt?: Int;
  length_lte?: Int;
  length_gt?: Int;
  length_gte?: Int;
  remarks?: String;
  remarks_not?: String;
  remarks_in?: String[] | String;
  remarks_not_in?: String[] | String;
  remarks_lt?: String;
  remarks_lte?: String;
  remarks_gt?: String;
  remarks_gte?: String;
  remarks_contains?: String;
  remarks_not_contains?: String;
  remarks_starts_with?: String;
  remarks_not_starts_with?: String;
  remarks_ends_with?: String;
  remarks_not_ends_with?: String;
  AND?: TalkWhereInput[] | TalkWhereInput;
  OR?: TalkWhereInput[] | TalkWhereInput;
  NOT?: TalkWhereInput[] | TalkWhereInput;
}

export interface EventWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  attendees_every?: UserWhereInput;
  attendees_some?: UserWhereInput;
  attendees_none?: UserWhereInput;
  organizer?: UserWhereInput;
  talks_every?: TalkWhereInput;
  talks_some?: TalkWhereInput;
  talks_none?: TalkWhereInput;
  venue?: VenueWhereInput;
  timeStart?: Int;
  timeStart_not?: Int;
  timeStart_in?: Int[] | Int;
  timeStart_not_in?: Int[] | Int;
  timeStart_lt?: Int;
  timeStart_lte?: Int;
  timeStart_gt?: Int;
  timeStart_gte?: Int;
  timeEnd?: Int;
  timeEnd_not?: Int;
  timeEnd_in?: Int[] | Int;
  timeEnd_not_in?: Int[] | Int;
  timeEnd_lt?: Int;
  timeEnd_lte?: Int;
  timeEnd_gt?: Int;
  timeEnd_gte?: Int;
  AND?: EventWhereInput[] | EventWhereInput;
  OR?: EventWhereInput[] | EventWhereInput;
  NOT?: EventWhereInput[] | EventWhereInput;
}

export interface VenueWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  googPlaceId?: String;
  googPlaceId_not?: String;
  googPlaceId_in?: String[] | String;
  googPlaceId_not_in?: String[] | String;
  googPlaceId_lt?: String;
  googPlaceId_lte?: String;
  googPlaceId_gt?: String;
  googPlaceId_gte?: String;
  googPlaceId_contains?: String;
  googPlaceId_not_contains?: String;
  googPlaceId_starts_with?: String;
  googPlaceId_not_starts_with?: String;
  googPlaceId_ends_with?: String;
  googPlaceId_not_ends_with?: String;
  coords?: CoordinatesWhereInput;
  AND?: VenueWhereInput[] | VenueWhereInput;
  OR?: VenueWhereInput[] | VenueWhereInput;
  NOT?: VenueWhereInput[] | VenueWhereInput;
}

export type TalkWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export type VenueWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CoordinatesCreateInput {
  x: Float;
  y: Float;
}

export interface CoordinatesUpdateManyMutationInput {
  x?: Float;
  y?: Float;
}

export interface EventCreateInput {
  name: String;
  attendees?: UserCreateManyInput;
  organizer: UserCreateOneInput;
  talks?: TalkCreateManyInput;
  venue?: VenueCreateOneInput;
  timeStart?: Int;
  timeEnd?: Int;
}

export interface UserCreateManyInput {
  create?: UserCreateInput[] | UserCreateInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateInput {
  name: String;
  middleName?: String;
  email: String;
  password: String;
  description?: String;
  socials?: SocialProfileCreateManyInput;
}

export interface SocialProfileCreateManyInput {
  create?: SocialProfileCreateInput[] | SocialProfileCreateInput;
}

export interface SocialProfileCreateInput {
  type: SocialNetworks;
  value: String;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface TalkCreateManyInput {
  create?: TalkCreateInput[] | TalkCreateInput;
  connect?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
}

export interface TalkCreateInput {
  title: String;
  description: String;
  speaker: UserCreateOneInput;
  length: Int;
  remarks?: String;
}

export interface VenueCreateOneInput {
  create?: VenueCreateInput;
  connect?: VenueWhereUniqueInput;
}

export interface VenueCreateInput {
  name: String;
  address: String;
  googPlaceId?: String;
  coords?: CoordinatesCreateOneInput;
}

export interface CoordinatesCreateOneInput {
  create?: CoordinatesCreateInput;
}

export interface EventUpdateInput {
  name?: String;
  attendees?: UserUpdateManyInput;
  organizer?: UserUpdateOneRequiredInput;
  talks?: TalkUpdateManyInput;
  venue?: VenueUpdateOneInput;
  timeStart?: Int;
  timeEnd?: Int;
}

export interface UserUpdateManyInput {
  create?: UserCreateInput[] | UserCreateInput;
  update?:
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput;
  upsert?:
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface UserUpdateDataInput {
  name?: String;
  middleName?: String;
  email?: String;
  password?: String;
  description?: String;
  socials?: SocialProfileUpdateManyInput;
}

export interface SocialProfileUpdateManyInput {
  create?: SocialProfileCreateInput[] | SocialProfileCreateInput;
  deleteMany?: SocialProfileScalarWhereInput[] | SocialProfileScalarWhereInput;
  updateMany?:
    | SocialProfileUpdateManyWithWhereNestedInput[]
    | SocialProfileUpdateManyWithWhereNestedInput;
}

export interface SocialProfileScalarWhereInput {
  type?: SocialNetworks;
  type_not?: SocialNetworks;
  type_in?: SocialNetworks[] | SocialNetworks;
  type_not_in?: SocialNetworks[] | SocialNetworks;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  AND?: SocialProfileScalarWhereInput[] | SocialProfileScalarWhereInput;
  OR?: SocialProfileScalarWhereInput[] | SocialProfileScalarWhereInput;
  NOT?: SocialProfileScalarWhereInput[] | SocialProfileScalarWhereInput;
}

export interface SocialProfileUpdateManyWithWhereNestedInput {
  where: SocialProfileScalarWhereInput;
  data: SocialProfileUpdateManyDataInput;
}

export interface SocialProfileUpdateManyDataInput {
  type?: SocialNetworks;
  value?: String;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  middleName?: String;
  middleName_not?: String;
  middleName_in?: String[] | String;
  middleName_not_in?: String[] | String;
  middleName_lt?: String;
  middleName_lte?: String;
  middleName_gt?: String;
  middleName_gte?: String;
  middleName_contains?: String;
  middleName_not_contains?: String;
  middleName_starts_with?: String;
  middleName_not_starts_with?: String;
  middleName_ends_with?: String;
  middleName_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  name?: String;
  middleName?: String;
  email?: String;
  password?: String;
  description?: String;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface TalkUpdateManyInput {
  create?: TalkCreateInput[] | TalkCreateInput;
  update?:
    | TalkUpdateWithWhereUniqueNestedInput[]
    | TalkUpdateWithWhereUniqueNestedInput;
  upsert?:
    | TalkUpsertWithWhereUniqueNestedInput[]
    | TalkUpsertWithWhereUniqueNestedInput;
  delete?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
  connect?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
  set?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
  disconnect?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
  deleteMany?: TalkScalarWhereInput[] | TalkScalarWhereInput;
  updateMany?:
    | TalkUpdateManyWithWhereNestedInput[]
    | TalkUpdateManyWithWhereNestedInput;
}

export interface TalkUpdateWithWhereUniqueNestedInput {
  where: TalkWhereUniqueInput;
  data: TalkUpdateDataInput;
}

export interface TalkUpdateDataInput {
  title?: String;
  description?: String;
  speaker?: UserUpdateOneRequiredInput;
  length?: Int;
  remarks?: String;
}

export interface TalkUpsertWithWhereUniqueNestedInput {
  where: TalkWhereUniqueInput;
  update: TalkUpdateDataInput;
  create: TalkCreateInput;
}

export interface TalkScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  length?: Int;
  length_not?: Int;
  length_in?: Int[] | Int;
  length_not_in?: Int[] | Int;
  length_lt?: Int;
  length_lte?: Int;
  length_gt?: Int;
  length_gte?: Int;
  remarks?: String;
  remarks_not?: String;
  remarks_in?: String[] | String;
  remarks_not_in?: String[] | String;
  remarks_lt?: String;
  remarks_lte?: String;
  remarks_gt?: String;
  remarks_gte?: String;
  remarks_contains?: String;
  remarks_not_contains?: String;
  remarks_starts_with?: String;
  remarks_not_starts_with?: String;
  remarks_ends_with?: String;
  remarks_not_ends_with?: String;
  AND?: TalkScalarWhereInput[] | TalkScalarWhereInput;
  OR?: TalkScalarWhereInput[] | TalkScalarWhereInput;
  NOT?: TalkScalarWhereInput[] | TalkScalarWhereInput;
}

export interface TalkUpdateManyWithWhereNestedInput {
  where: TalkScalarWhereInput;
  data: TalkUpdateManyDataInput;
}

export interface TalkUpdateManyDataInput {
  title?: String;
  description?: String;
  length?: Int;
  remarks?: String;
}

export interface VenueUpdateOneInput {
  create?: VenueCreateInput;
  update?: VenueUpdateDataInput;
  upsert?: VenueUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: VenueWhereUniqueInput;
}

export interface VenueUpdateDataInput {
  name?: String;
  address?: String;
  googPlaceId?: String;
  coords?: CoordinatesUpdateOneInput;
}

export interface CoordinatesUpdateOneInput {
  create?: CoordinatesCreateInput;
  update?: CoordinatesUpdateDataInput;
  upsert?: CoordinatesUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
}

export interface CoordinatesUpdateDataInput {
  x?: Float;
  y?: Float;
}

export interface CoordinatesUpsertNestedInput {
  update: CoordinatesUpdateDataInput;
  create: CoordinatesCreateInput;
}

export interface VenueUpsertNestedInput {
  update: VenueUpdateDataInput;
  create: VenueCreateInput;
}

export interface EventUpdateManyMutationInput {
  name?: String;
  timeStart?: Int;
  timeEnd?: Int;
}

export interface SocialProfileUpdateManyMutationInput {
  type?: SocialNetworks;
  value?: String;
}

export interface TalkUpdateInput {
  title?: String;
  description?: String;
  speaker?: UserUpdateOneRequiredInput;
  length?: Int;
  remarks?: String;
}

export interface TalkUpdateManyMutationInput {
  title?: String;
  description?: String;
  length?: Int;
  remarks?: String;
}

export interface UserUpdateInput {
  name?: String;
  middleName?: String;
  email?: String;
  password?: String;
  description?: String;
  socials?: SocialProfileUpdateManyInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  middleName?: String;
  email?: String;
  password?: String;
  description?: String;
}

export interface VenueUpdateInput {
  name?: String;
  address?: String;
  googPlaceId?: String;
  coords?: CoordinatesUpdateOneInput;
}

export interface VenueUpdateManyMutationInput {
  name?: String;
  address?: String;
  googPlaceId?: String;
}

export interface CoordinatesSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CoordinatesWhereInput;
  AND?: CoordinatesSubscriptionWhereInput[] | CoordinatesSubscriptionWhereInput;
  OR?: CoordinatesSubscriptionWhereInput[] | CoordinatesSubscriptionWhereInput;
  NOT?: CoordinatesSubscriptionWhereInput[] | CoordinatesSubscriptionWhereInput;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EventWhereInput;
  AND?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput;
  OR?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput;
  NOT?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput;
}

export interface SocialProfileSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SocialProfileWhereInput;
  AND?:
    | SocialProfileSubscriptionWhereInput[]
    | SocialProfileSubscriptionWhereInput;
  OR?:
    | SocialProfileSubscriptionWhereInput[]
    | SocialProfileSubscriptionWhereInput;
  NOT?:
    | SocialProfileSubscriptionWhereInput[]
    | SocialProfileSubscriptionWhereInput;
}

export interface TalkSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TalkWhereInput;
  AND?: TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput;
  OR?: TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput;
  NOT?: TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface VenueSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VenueWhereInput;
  AND?: VenueSubscriptionWhereInput[] | VenueSubscriptionWhereInput;
  OR?: VenueSubscriptionWhereInput[] | VenueSubscriptionWhereInput;
  NOT?: VenueSubscriptionWhereInput[] | VenueSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Coordinates {
  x: Float;
  y: Float;
}

export interface CoordinatesPromise extends Promise<Coordinates>, Fragmentable {
  x: () => Promise<Float>;
  y: () => Promise<Float>;
}

export interface CoordinatesSubscription
  extends Promise<AsyncIterator<Coordinates>>,
    Fragmentable {
  x: () => Promise<AsyncIterator<Float>>;
  y: () => Promise<AsyncIterator<Float>>;
}

export interface CoordinatesConnection {
  pageInfo: PageInfo;
  edges: CoordinatesEdge[];
}

export interface CoordinatesConnectionPromise
  extends Promise<CoordinatesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CoordinatesEdge>>() => T;
  aggregate: <T = AggregateCoordinatesPromise>() => T;
}

export interface CoordinatesConnectionSubscription
  extends Promise<AsyncIterator<CoordinatesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CoordinatesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCoordinatesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CoordinatesEdge {
  node: Coordinates;
  cursor: String;
}

export interface CoordinatesEdgePromise
  extends Promise<CoordinatesEdge>,
    Fragmentable {
  node: <T = CoordinatesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CoordinatesEdgeSubscription
  extends Promise<AsyncIterator<CoordinatesEdge>>,
    Fragmentable {
  node: <T = CoordinatesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCoordinates {
  count: Int;
}

export interface AggregateCoordinatesPromise
  extends Promise<AggregateCoordinates>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCoordinatesSubscription
  extends Promise<AsyncIterator<AggregateCoordinates>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Event {
  id: ID_Output;
  name: String;
  timeStart?: Int;
  timeEnd?: Int;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  attendees: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  organizer: <T = UserPromise>() => T;
  talks: <T = FragmentableArray<Talk>>(args?: {
    where?: TalkWhereInput;
    orderBy?: TalkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  venue: <T = VenuePromise>() => T;
  timeStart: () => Promise<Int>;
  timeEnd: () => Promise<Int>;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  attendees: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  organizer: <T = UserSubscription>() => T;
  talks: <T = Promise<AsyncIterator<TalkSubscription>>>(args?: {
    where?: TalkWhereInput;
    orderBy?: TalkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  venue: <T = VenueSubscription>() => T;
  timeStart: () => Promise<AsyncIterator<Int>>;
  timeEnd: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
  middleName?: String;
  email: String;
  password: String;
  description?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  middleName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  description: () => Promise<String>;
  socials: <T = FragmentableArray<SocialProfile>>(args?: {
    where?: SocialProfileWhereInput;
    orderBy?: SocialProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  middleName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  socials: <T = Promise<AsyncIterator<SocialProfileSubscription>>>(args?: {
    where?: SocialProfileWhereInput;
    orderBy?: SocialProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SocialProfile {
  type: SocialNetworks;
  value: String;
}

export interface SocialProfilePromise
  extends Promise<SocialProfile>,
    Fragmentable {
  type: () => Promise<SocialNetworks>;
  value: () => Promise<String>;
}

export interface SocialProfileSubscription
  extends Promise<AsyncIterator<SocialProfile>>,
    Fragmentable {
  type: () => Promise<AsyncIterator<SocialNetworks>>;
  value: () => Promise<AsyncIterator<String>>;
}

export interface Talk {
  id: ID_Output;
  title: String;
  description: String;
  createdAt: DateTimeOutput;
  length: Int;
  remarks?: String;
}

export interface TalkPromise extends Promise<Talk>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  speaker: <T = UserPromise>() => T;
  length: () => Promise<Int>;
  remarks: () => Promise<String>;
}

export interface TalkSubscription
  extends Promise<AsyncIterator<Talk>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  speaker: <T = UserSubscription>() => T;
  length: () => Promise<AsyncIterator<Int>>;
  remarks: () => Promise<AsyncIterator<String>>;
}

export interface Venue {
  id: ID_Output;
  name: String;
  address: String;
  googPlaceId?: String;
}

export interface VenuePromise extends Promise<Venue>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  googPlaceId: () => Promise<String>;
  coords: <T = CoordinatesPromise>() => T;
}

export interface VenueSubscription
  extends Promise<AsyncIterator<Venue>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  googPlaceId: () => Promise<AsyncIterator<String>>;
  coords: <T = CoordinatesSubscription>() => T;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SocialProfileConnection {
  pageInfo: PageInfo;
  edges: SocialProfileEdge[];
}

export interface SocialProfileConnectionPromise
  extends Promise<SocialProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SocialProfileEdge>>() => T;
  aggregate: <T = AggregateSocialProfilePromise>() => T;
}

export interface SocialProfileConnectionSubscription
  extends Promise<AsyncIterator<SocialProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SocialProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSocialProfileSubscription>() => T;
}

export interface SocialProfileEdge {
  node: SocialProfile;
  cursor: String;
}

export interface SocialProfileEdgePromise
  extends Promise<SocialProfileEdge>,
    Fragmentable {
  node: <T = SocialProfilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface SocialProfileEdgeSubscription
  extends Promise<AsyncIterator<SocialProfileEdge>>,
    Fragmentable {
  node: <T = SocialProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSocialProfile {
  count: Int;
}

export interface AggregateSocialProfilePromise
  extends Promise<AggregateSocialProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSocialProfileSubscription
  extends Promise<AsyncIterator<AggregateSocialProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TalkConnection {
  pageInfo: PageInfo;
  edges: TalkEdge[];
}

export interface TalkConnectionPromise
  extends Promise<TalkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TalkEdge>>() => T;
  aggregate: <T = AggregateTalkPromise>() => T;
}

export interface TalkConnectionSubscription
  extends Promise<AsyncIterator<TalkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TalkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTalkSubscription>() => T;
}

export interface TalkEdge {
  node: Talk;
  cursor: String;
}

export interface TalkEdgePromise extends Promise<TalkEdge>, Fragmentable {
  node: <T = TalkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TalkEdgeSubscription
  extends Promise<AsyncIterator<TalkEdge>>,
    Fragmentable {
  node: <T = TalkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTalk {
  count: Int;
}

export interface AggregateTalkPromise
  extends Promise<AggregateTalk>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTalkSubscription
  extends Promise<AsyncIterator<AggregateTalk>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VenueConnection {
  pageInfo: PageInfo;
  edges: VenueEdge[];
}

export interface VenueConnectionPromise
  extends Promise<VenueConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VenueEdge>>() => T;
  aggregate: <T = AggregateVenuePromise>() => T;
}

export interface VenueConnectionSubscription
  extends Promise<AsyncIterator<VenueConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VenueEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVenueSubscription>() => T;
}

export interface VenueEdge {
  node: Venue;
  cursor: String;
}

export interface VenueEdgePromise extends Promise<VenueEdge>, Fragmentable {
  node: <T = VenuePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VenueEdgeSubscription
  extends Promise<AsyncIterator<VenueEdge>>,
    Fragmentable {
  node: <T = VenueSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVenue {
  count: Int;
}

export interface AggregateVenuePromise
  extends Promise<AggregateVenue>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVenueSubscription
  extends Promise<AsyncIterator<AggregateVenue>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CoordinatesSubscriptionPayload {
  mutation: MutationType;
  node: Coordinates;
  updatedFields: String[];
  previousValues: CoordinatesPreviousValues;
}

export interface CoordinatesSubscriptionPayloadPromise
  extends Promise<CoordinatesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CoordinatesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CoordinatesPreviousValuesPromise>() => T;
}

export interface CoordinatesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CoordinatesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CoordinatesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CoordinatesPreviousValuesSubscription>() => T;
}

export interface CoordinatesPreviousValues {
  x: Float;
  y: Float;
}

export interface CoordinatesPreviousValuesPromise
  extends Promise<CoordinatesPreviousValues>,
    Fragmentable {
  x: () => Promise<Float>;
  y: () => Promise<Float>;
}

export interface CoordinatesPreviousValuesSubscription
  extends Promise<AsyncIterator<CoordinatesPreviousValues>>,
    Fragmentable {
  x: () => Promise<AsyncIterator<Float>>;
  y: () => Promise<AsyncIterator<Float>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface EventPreviousValues {
  id: ID_Output;
  name: String;
  timeStart?: Int;
  timeEnd?: Int;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  timeStart: () => Promise<Int>;
  timeEnd: () => Promise<Int>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  timeStart: () => Promise<AsyncIterator<Int>>;
  timeEnd: () => Promise<AsyncIterator<Int>>;
}

export interface SocialProfileSubscriptionPayload {
  mutation: MutationType;
  node: SocialProfile;
  updatedFields: String[];
  previousValues: SocialProfilePreviousValues;
}

export interface SocialProfileSubscriptionPayloadPromise
  extends Promise<SocialProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SocialProfilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SocialProfilePreviousValuesPromise>() => T;
}

export interface SocialProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SocialProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SocialProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SocialProfilePreviousValuesSubscription>() => T;
}

export interface SocialProfilePreviousValues {
  type: SocialNetworks;
  value: String;
}

export interface SocialProfilePreviousValuesPromise
  extends Promise<SocialProfilePreviousValues>,
    Fragmentable {
  type: () => Promise<SocialNetworks>;
  value: () => Promise<String>;
}

export interface SocialProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<SocialProfilePreviousValues>>,
    Fragmentable {
  type: () => Promise<AsyncIterator<SocialNetworks>>;
  value: () => Promise<AsyncIterator<String>>;
}

export interface TalkSubscriptionPayload {
  mutation: MutationType;
  node: Talk;
  updatedFields: String[];
  previousValues: TalkPreviousValues;
}

export interface TalkSubscriptionPayloadPromise
  extends Promise<TalkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TalkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TalkPreviousValuesPromise>() => T;
}

export interface TalkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TalkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TalkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TalkPreviousValuesSubscription>() => T;
}

export interface TalkPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  createdAt: DateTimeOutput;
  length: Int;
  remarks?: String;
}

export interface TalkPreviousValuesPromise
  extends Promise<TalkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  length: () => Promise<Int>;
  remarks: () => Promise<String>;
}

export interface TalkPreviousValuesSubscription
  extends Promise<AsyncIterator<TalkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  length: () => Promise<AsyncIterator<Int>>;
  remarks: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
  middleName?: String;
  email: String;
  password: String;
  description?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  middleName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  description: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  middleName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface VenueSubscriptionPayload {
  mutation: MutationType;
  node: Venue;
  updatedFields: String[];
  previousValues: VenuePreviousValues;
}

export interface VenueSubscriptionPayloadPromise
  extends Promise<VenueSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VenuePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VenuePreviousValuesPromise>() => T;
}

export interface VenueSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VenueSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VenueSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VenuePreviousValuesSubscription>() => T;
}

export interface VenuePreviousValues {
  id: ID_Output;
  name: String;
  address: String;
  googPlaceId?: String;
}

export interface VenuePreviousValuesPromise
  extends Promise<VenuePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  googPlaceId: () => Promise<String>;
}

export interface VenuePreviousValuesSubscription
  extends Promise<AsyncIterator<VenuePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  googPlaceId: () => Promise<AsyncIterator<String>>;
}

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Coordinates",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  },
  {
    name: "SocialNetworks",
    embedded: false
  },
  {
    name: "SocialProfile",
    embedded: false
  },
  {
    name: "Talk",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Venue",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
